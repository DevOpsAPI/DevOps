name: cicd
on:
  push:
    branches:
      - main
env:
  CONTAINER_VERSIE: 1.4
jobs:
  test: 
    runs-on: ubuntu-latest
    steps:
    -
      uses: actions/checkout@v3
    -
      name: Set up Python 3.11.4
      uses: actions/setup-python@v3
      with:
        python-version: "3.11.4"
    -
      name: Add IP address to trusted source (managed database)
      uses: GarreauArthur/manage-digital-ocean-managed-database-trusted-sources-gh-action@main
      with:
        action: "add"
        database_id: ${{ secrets.DATABASE_ID }}
        digitalocean_token: ${{ secrets.DOCKER_TOKEN }}
    -
      name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    -
      name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    -
        name: Test with pytest
        env:
          MYSQL_HOST: ${{secrets.MYSQL_HOST}}
          MYSQL_USER: ${{secrets.MYSQL_USER}}
          MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD}}
          MYSQL_PORT: ${{secrets.MYSQL_PORT}}
          MYSQL_DB: ${{secrets.MYSQL_DB}}
        run: |
          pytest test_endpoints.py --cov
    -
      name: Remove IP address to trusted source (managed database)
      uses: GarreauArthur/manage-digital-ocean-managed-database-trusted-sources-gh-action@main
      with:
        action: "remove"
        database_id: ${{ secrets.DATABASE_ID }}
        digitalocean_token: ${{ secrets.DOCKER_TOKEN }}
 
  build:
      runs-on: ubuntu-latest
      needs: test
      steps:
        -
          name: Checkout files
          uses: actions/checkout@v2
  
        -
          name: Install doctl
          uses: digitalocean/action-doctl@v2
          with:
            token: ${{ secrets.DOCKER_TOKEN }}
        -
          name: Login to DigitalOcean Container Registry
          run: doctl registry login
        -
          name: Build Docker image
          run: docker build -t registry.digitalocean.com/devopsapi/api:$CONTAINER_VERSIE .
        -
          name: Push Docker image to DigitalOcean
          run: docker push registry.digitalocean.com/devopsapi/api:$CONTAINER_VERSIE
        # -
        #   name: empty garbage
        #   run: doctl registry garbage-collection start --include-untagged-manifests --force
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      -
        name: Checkout files
        uses: actions/checkout@v2
   
      -
        name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCKER_TOKEN }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
      -
        name: Login to DigitalOcean Container Registry
        run: echo ${{ secrets.DOCKER_TOKEN }} | docker login -u "sennebolman2005@gmail.com" --password-stdin registry.digitalocean.com
      - name: Terraform Init voor alle andere componenten
        run: |
            cd iac
            terraform init \
              -backend-config="access_key=${{secrets.SPACE_ACCESS_KEY}}" \
              -backend-config="secret_key=${{secrets.SPACE_SECRET_KEY}}"
      - name: Terraform Plan voor alle andere componenten
        run: |
            cd iac
            terraform plan \
              -var="db_password=${{secrets.MYSQL_PASSWORD}}" \
              -var="db_user=${{secrets.MYSQL_USER}}" \
              -var="db_host=${{secrets.MYSQL_HOST}}" \
              -var="db_name=${{secrets.MYSQL_DB}}" \
              -var="db_port=${{secrets.MYSQL_PORT}}" \
              -var="do_token=${{secrets.DOCKER_TOKEN}}" \
              -var="container_version=$CONTAINER_VERSIE"

      - name: Terraform Apply voor alle andere componenten
        run: |
          cd iac
          terraform apply -auto-approve \
              -var="db_password=${{secrets.MYSQL_PASSWORD}}" \
              -var="db_user=${{secrets.MYSQL_USER}}" \
              -var="db_host=${{secrets.MYSQL_HOST}}" \
              -var="db_name=${{secrets.MYSQL_DB}}" \
              -var="db_port=${{secrets.MYSQL_PORT}}" \
              -var="do_token=${{secrets.DOCKER_TOKEN}}" \
              -var="container_version=$CONTAINER_VERSIE"

      # -
      #   name: Update deployment file
      #   run: |
      #     sed -i 's|placeholder_host|${{ secrets.HOST_DB }}|' $GITHUB_WORKSPACE/.config/deployment.yaml
      # -
      #   name: Update deployment file
      #   run: |
      #     sed -i 's|placeholder_passwd|${{ secrets.DB_PASSWORD }}|' $GITHUB_WORKSPACE/.config/deployment.yaml
      # -
      #   name: apply
      #   run: kubectl apply -f $GITHUB_WORKSPACE/.config/deployment.yaml
      # -
      #   name: update deployment file
      #   run:  kubectl set image deployment/python-deploy api=registry.digitalocean.com/devopsapi/api:latest
      # -
      #   name: Verify deployment
      #   run: kubectl rollout status deployment/python-deploy
      # -
      #   name: Deploy load balancer
      #   run: kubectl apply -f ${GITHUB_WORKSPACE}/.config/loadbalancer.yaml
      # -
      #   name: restart deployment
      #   run: kubectl rollout restart -n default deployment python-deploy